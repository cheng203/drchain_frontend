{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport React from 'react';\n\nvar ColumnManager = function () {\n  function ColumnManager(columns, elements) {\n    _classCallCheck(this, ColumnManager);\n\n    this._cached = {};\n    this.columns = columns || this.normalize(elements);\n  }\n\n  ColumnManager.prototype.isAnyColumnsFixed = function isAnyColumnsFixed() {\n    var _this = this;\n\n    return this._cache('isAnyColumnsFixed', function () {\n      return _this.columns.some(function (column) {\n        return !!column.fixed;\n      });\n    });\n  };\n\n  ColumnManager.prototype.isAnyColumnsLeftFixed = function isAnyColumnsLeftFixed() {\n    var _this2 = this;\n\n    return this._cache('isAnyColumnsLeftFixed', function () {\n      return _this2.columns.some(function (column) {\n        return column.fixed === 'left' || column.fixed === true;\n      });\n    });\n  };\n\n  ColumnManager.prototype.isAnyColumnsRightFixed = function isAnyColumnsRightFixed() {\n    var _this3 = this;\n\n    return this._cache('isAnyColumnsRightFixed', function () {\n      return _this3.columns.some(function (column) {\n        return column.fixed === 'right';\n      });\n    });\n  };\n\n  ColumnManager.prototype.leftColumns = function leftColumns() {\n    var _this4 = this;\n\n    return this._cache('leftColumns', function () {\n      return _this4.groupedColumns().filter(function (column) {\n        return column.fixed === 'left' || column.fixed === true;\n      });\n    });\n  };\n\n  ColumnManager.prototype.rightColumns = function rightColumns() {\n    var _this5 = this;\n\n    return this._cache('rightColumns', function () {\n      return _this5.groupedColumns().filter(function (column) {\n        return column.fixed === 'right';\n      });\n    });\n  };\n\n  ColumnManager.prototype.leafColumns = function leafColumns() {\n    var _this6 = this;\n\n    return this._cache('leafColumns', function () {\n      return _this6._leafColumns(_this6.columns);\n    });\n  };\n\n  ColumnManager.prototype.leftLeafColumns = function leftLeafColumns() {\n    var _this7 = this;\n\n    return this._cache('leftLeafColumns', function () {\n      return _this7._leafColumns(_this7.leftColumns());\n    });\n  };\n\n  ColumnManager.prototype.rightLeafColumns = function rightLeafColumns() {\n    var _this8 = this;\n\n    return this._cache('rightLeafColumns', function () {\n      return _this8._leafColumns(_this8.rightColumns());\n    });\n  }; // add appropriate rowspan and colspan to column\n\n\n  ColumnManager.prototype.groupedColumns = function groupedColumns() {\n    var _this9 = this;\n\n    return this._cache('groupedColumns', function () {\n      var _groupColumns = function _groupColumns(columns) {\n        var currentRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var parentColumn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var rows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : []; // track how many rows we got\n\n        rows[currentRow] = rows[currentRow] || [];\n        var grouped = [];\n\n        var setRowSpan = function setRowSpan(column) {\n          var rowSpan = rows.length - currentRow;\n\n          if (column && !column.children && // parent columns are supposed to be one row\n          rowSpan > 1 && (!column.rowSpan || column.rowSpan < rowSpan)) {\n            column.rowSpan = rowSpan;\n          }\n        };\n\n        columns.forEach(function (column, index) {\n          var newColumn = _extends({}, column);\n\n          rows[currentRow].push(newColumn);\n          parentColumn.colSpan = parentColumn.colSpan || 0;\n\n          if (newColumn.children && newColumn.children.length > 0) {\n            newColumn.children = _groupColumns(newColumn.children, currentRow + 1, newColumn, rows);\n            parentColumn.colSpan += newColumn.colSpan;\n          } else {\n            parentColumn.colSpan++;\n          } // update rowspan to all same row columns\n\n\n          for (var i = 0; i < rows[currentRow].length - 1; ++i) {\n            setRowSpan(rows[currentRow][i]);\n          } // last column, update rowspan immediately\n\n\n          if (index + 1 === columns.length) {\n            setRowSpan(newColumn);\n          }\n\n          grouped.push(newColumn);\n        });\n        return grouped;\n      };\n\n      return _groupColumns(_this9.columns);\n    });\n  };\n\n  ColumnManager.prototype.normalize = function normalize(elements) {\n    var _this10 = this;\n\n    var columns = [];\n    React.Children.forEach(elements, function (element) {\n      if (!React.isValidElement(element)) {\n        return;\n      }\n\n      var column = _extends({}, element.props);\n\n      if (element.key) {\n        column.key = element.key;\n      }\n\n      if (element.type.isTableColumnGroup) {\n        column.children = _this10.normalize(column.children);\n      }\n\n      columns.push(column);\n    });\n    return columns;\n  };\n\n  ColumnManager.prototype.reset = function reset(columns, elements) {\n    this.columns = columns || this.normalize(elements);\n    this._cached = {};\n  };\n\n  ColumnManager.prototype._cache = function _cache(name, fn) {\n    if (name in this._cached) {\n      return this._cached[name];\n    }\n\n    this._cached[name] = fn();\n    return this._cached[name];\n  };\n\n  ColumnManager.prototype._leafColumns = function _leafColumns(columns) {\n    var _this11 = this;\n\n    var leafColumns = [];\n    columns.forEach(function (column) {\n      if (!column.children) {\n        leafColumns.push(column);\n      } else {\n        leafColumns.push.apply(leafColumns, _this11._leafColumns(column.children));\n      }\n    });\n    return leafColumns;\n  };\n\n  return ColumnManager;\n}();\n\nexport default ColumnManager;","map":{"version":3,"sources":["/Users/administrator/Desktop/DrChain/drchain_frontend/drchain/node_modules/rc-table/es/ColumnManager.js"],"names":["_extends","_classCallCheck","React","ColumnManager","columns","elements","_cached","normalize","prototype","isAnyColumnsFixed","_this","_cache","some","column","fixed","isAnyColumnsLeftFixed","_this2","isAnyColumnsRightFixed","_this3","leftColumns","_this4","groupedColumns","filter","rightColumns","_this5","leafColumns","_this6","_leafColumns","leftLeafColumns","_this7","rightLeafColumns","_this8","_this9","_groupColumns","currentRow","arguments","length","undefined","parentColumn","rows","grouped","setRowSpan","rowSpan","children","forEach","index","newColumn","push","colSpan","i","_this10","Children","element","isValidElement","props","key","type","isTableColumnGroup","reset","name","fn","_this11","apply"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,+BAArB;AACA,OAAOC,eAAP,MAA4B,sCAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAIC,aAAa,GAAG,YAAY;AAC9B,WAASA,aAAT,CAAuBC,OAAvB,EAAgCC,QAAhC,EAA0C;AACxCJ,IAAAA,eAAe,CAAC,IAAD,EAAOE,aAAP,CAAf;;AAEA,SAAKG,OAAL,GAAe,EAAf;AAEA,SAAKF,OAAL,GAAeA,OAAO,IAAI,KAAKG,SAAL,CAAeF,QAAf,CAA1B;AACD;;AAEDF,EAAAA,aAAa,CAACK,SAAd,CAAwBC,iBAAxB,GAA4C,SAASA,iBAAT,GAA6B;AACvE,QAAIC,KAAK,GAAG,IAAZ;;AAEA,WAAO,KAAKC,MAAL,CAAY,mBAAZ,EAAiC,YAAY;AAClD,aAAOD,KAAK,CAACN,OAAN,CAAcQ,IAAd,CAAmB,UAAUC,MAAV,EAAkB;AAC1C,eAAO,CAAC,CAACA,MAAM,CAACC,KAAhB;AACD,OAFM,CAAP;AAGD,KAJM,CAAP;AAKD,GARD;;AAUAX,EAAAA,aAAa,CAACK,SAAd,CAAwBO,qBAAxB,GAAgD,SAASA,qBAAT,GAAiC;AAC/E,QAAIC,MAAM,GAAG,IAAb;;AAEA,WAAO,KAAKL,MAAL,CAAY,uBAAZ,EAAqC,YAAY;AACtD,aAAOK,MAAM,CAACZ,OAAP,CAAeQ,IAAf,CAAoB,UAAUC,MAAV,EAAkB;AAC3C,eAAOA,MAAM,CAACC,KAAP,KAAiB,MAAjB,IAA2BD,MAAM,CAACC,KAAP,KAAiB,IAAnD;AACD,OAFM,CAAP;AAGD,KAJM,CAAP;AAKD,GARD;;AAUAX,EAAAA,aAAa,CAACK,SAAd,CAAwBS,sBAAxB,GAAiD,SAASA,sBAAT,GAAkC;AACjF,QAAIC,MAAM,GAAG,IAAb;;AAEA,WAAO,KAAKP,MAAL,CAAY,wBAAZ,EAAsC,YAAY;AACvD,aAAOO,MAAM,CAACd,OAAP,CAAeQ,IAAf,CAAoB,UAAUC,MAAV,EAAkB;AAC3C,eAAOA,MAAM,CAACC,KAAP,KAAiB,OAAxB;AACD,OAFM,CAAP;AAGD,KAJM,CAAP;AAKD,GARD;;AAUAX,EAAAA,aAAa,CAACK,SAAd,CAAwBW,WAAxB,GAAsC,SAASA,WAAT,GAAuB;AAC3D,QAAIC,MAAM,GAAG,IAAb;;AAEA,WAAO,KAAKT,MAAL,CAAY,aAAZ,EAA2B,YAAY;AAC5C,aAAOS,MAAM,CAACC,cAAP,GAAwBC,MAAxB,CAA+B,UAAUT,MAAV,EAAkB;AACtD,eAAOA,MAAM,CAACC,KAAP,KAAiB,MAAjB,IAA2BD,MAAM,CAACC,KAAP,KAAiB,IAAnD;AACD,OAFM,CAAP;AAGD,KAJM,CAAP;AAKD,GARD;;AAUAX,EAAAA,aAAa,CAACK,SAAd,CAAwBe,YAAxB,GAAuC,SAASA,YAAT,GAAwB;AAC7D,QAAIC,MAAM,GAAG,IAAb;;AAEA,WAAO,KAAKb,MAAL,CAAY,cAAZ,EAA4B,YAAY;AAC7C,aAAOa,MAAM,CAACH,cAAP,GAAwBC,MAAxB,CAA+B,UAAUT,MAAV,EAAkB;AACtD,eAAOA,MAAM,CAACC,KAAP,KAAiB,OAAxB;AACD,OAFM,CAAP;AAGD,KAJM,CAAP;AAKD,GARD;;AAUAX,EAAAA,aAAa,CAACK,SAAd,CAAwBiB,WAAxB,GAAsC,SAASA,WAAT,GAAuB;AAC3D,QAAIC,MAAM,GAAG,IAAb;;AAEA,WAAO,KAAKf,MAAL,CAAY,aAAZ,EAA2B,YAAY;AAC5C,aAAOe,MAAM,CAACC,YAAP,CAAoBD,MAAM,CAACtB,OAA3B,CAAP;AACD,KAFM,CAAP;AAGD,GAND;;AAQAD,EAAAA,aAAa,CAACK,SAAd,CAAwBoB,eAAxB,GAA0C,SAASA,eAAT,GAA2B;AACnE,QAAIC,MAAM,GAAG,IAAb;;AAEA,WAAO,KAAKlB,MAAL,CAAY,iBAAZ,EAA+B,YAAY;AAChD,aAAOkB,MAAM,CAACF,YAAP,CAAoBE,MAAM,CAACV,WAAP,EAApB,CAAP;AACD,KAFM,CAAP;AAGD,GAND;;AAQAhB,EAAAA,aAAa,CAACK,SAAd,CAAwBsB,gBAAxB,GAA2C,SAASA,gBAAT,GAA4B;AACrE,QAAIC,MAAM,GAAG,IAAb;;AAEA,WAAO,KAAKpB,MAAL,CAAY,kBAAZ,EAAgC,YAAY;AACjD,aAAOoB,MAAM,CAACJ,YAAP,CAAoBI,MAAM,CAACR,YAAP,EAApB,CAAP;AACD,KAFM,CAAP;AAGD,GAND,CA3E8B,CAmF9B;;;AAGApB,EAAAA,aAAa,CAACK,SAAd,CAAwBa,cAAxB,GAAyC,SAASA,cAAT,GAA0B;AACjE,QAAIW,MAAM,GAAG,IAAb;;AAEA,WAAO,KAAKrB,MAAL,CAAY,gBAAZ,EAA8B,YAAY;AAC/C,UAAIsB,aAAa,GAAG,SAASA,aAAT,CAAuB7B,OAAvB,EAAgC;AAClD,YAAI8B,UAAU,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,CAArF;AACA,YAAIG,YAAY,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAvF;AACA,YAAII,IAAI,GAAGJ,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E,CAHkD,CAKlD;;AACAI,QAAAA,IAAI,CAACL,UAAD,CAAJ,GAAmBK,IAAI,CAACL,UAAD,CAAJ,IAAoB,EAAvC;AACA,YAAIM,OAAO,GAAG,EAAd;;AACA,YAAIC,UAAU,GAAG,SAASA,UAAT,CAAoB5B,MAApB,EAA4B;AAC3C,cAAI6B,OAAO,GAAGH,IAAI,CAACH,MAAL,GAAcF,UAA5B;;AACA,cAAIrB,MAAM,IAAI,CAACA,MAAM,CAAC8B,QAAlB,IAA8B;AAClCD,UAAAA,OAAO,GAAG,CADN,KACY,CAAC7B,MAAM,CAAC6B,OAAR,IAAmB7B,MAAM,CAAC6B,OAAP,GAAiBA,OADhD,CAAJ,EAC8D;AAC5D7B,YAAAA,MAAM,CAAC6B,OAAP,GAAiBA,OAAjB;AACD;AACF,SAND;;AAOAtC,QAAAA,OAAO,CAACwC,OAAR,CAAgB,UAAU/B,MAAV,EAAkBgC,KAAlB,EAAyB;AACvC,cAAIC,SAAS,GAAG9C,QAAQ,CAAC,EAAD,EAAKa,MAAL,CAAxB;;AACA0B,UAAAA,IAAI,CAACL,UAAD,CAAJ,CAAiBa,IAAjB,CAAsBD,SAAtB;AACAR,UAAAA,YAAY,CAACU,OAAb,GAAuBV,YAAY,CAACU,OAAb,IAAwB,CAA/C;;AACA,cAAIF,SAAS,CAACH,QAAV,IAAsBG,SAAS,CAACH,QAAV,CAAmBP,MAAnB,GAA4B,CAAtD,EAAyD;AACvDU,YAAAA,SAAS,CAACH,QAAV,GAAqBV,aAAa,CAACa,SAAS,CAACH,QAAX,EAAqBT,UAAU,GAAG,CAAlC,EAAqCY,SAArC,EAAgDP,IAAhD,CAAlC;AACAD,YAAAA,YAAY,CAACU,OAAb,IAAwBF,SAAS,CAACE,OAAlC;AACD,WAHD,MAGO;AACLV,YAAAA,YAAY,CAACU,OAAb;AACD,WATsC,CAUvC;;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,IAAI,CAACL,UAAD,CAAJ,CAAiBE,MAAjB,GAA0B,CAA9C,EAAiD,EAAEa,CAAnD,EAAsD;AACpDR,YAAAA,UAAU,CAACF,IAAI,CAACL,UAAD,CAAJ,CAAiBe,CAAjB,CAAD,CAAV;AACD,WAbsC,CAcvC;;;AACA,cAAIJ,KAAK,GAAG,CAAR,KAAczC,OAAO,CAACgC,MAA1B,EAAkC;AAChCK,YAAAA,UAAU,CAACK,SAAD,CAAV;AACD;;AACDN,UAAAA,OAAO,CAACO,IAAR,CAAaD,SAAb;AACD,SAnBD;AAoBA,eAAON,OAAP;AACD,OApCD;;AAqCA,aAAOP,aAAa,CAACD,MAAM,CAAC5B,OAAR,CAApB;AACD,KAvCM,CAAP;AAwCD,GA3CD;;AA6CAD,EAAAA,aAAa,CAACK,SAAd,CAAwBD,SAAxB,GAAoC,SAASA,SAAT,CAAmBF,QAAnB,EAA6B;AAC/D,QAAI6C,OAAO,GAAG,IAAd;;AAEA,QAAI9C,OAAO,GAAG,EAAd;AACAF,IAAAA,KAAK,CAACiD,QAAN,CAAeP,OAAf,CAAuBvC,QAAvB,EAAiC,UAAU+C,OAAV,EAAmB;AAClD,UAAI,CAAClD,KAAK,CAACmD,cAAN,CAAqBD,OAArB,CAAL,EAAoC;AAClC;AACD;;AACD,UAAIvC,MAAM,GAAGb,QAAQ,CAAC,EAAD,EAAKoD,OAAO,CAACE,KAAb,CAArB;;AACA,UAAIF,OAAO,CAACG,GAAZ,EAAiB;AACf1C,QAAAA,MAAM,CAAC0C,GAAP,GAAaH,OAAO,CAACG,GAArB;AACD;;AACD,UAAIH,OAAO,CAACI,IAAR,CAAaC,kBAAjB,EAAqC;AACnC5C,QAAAA,MAAM,CAAC8B,QAAP,GAAkBO,OAAO,CAAC3C,SAAR,CAAkBM,MAAM,CAAC8B,QAAzB,CAAlB;AACD;;AACDvC,MAAAA,OAAO,CAAC2C,IAAR,CAAalC,MAAb;AACD,KAZD;AAaA,WAAOT,OAAP;AACD,GAlBD;;AAoBAD,EAAAA,aAAa,CAACK,SAAd,CAAwBkD,KAAxB,GAAgC,SAASA,KAAT,CAAetD,OAAf,EAAwBC,QAAxB,EAAkC;AAChE,SAAKD,OAAL,GAAeA,OAAO,IAAI,KAAKG,SAAL,CAAeF,QAAf,CAA1B;AACA,SAAKC,OAAL,GAAe,EAAf;AACD,GAHD;;AAKAH,EAAAA,aAAa,CAACK,SAAd,CAAwBG,MAAxB,GAAiC,SAASA,MAAT,CAAgBgD,IAAhB,EAAsBC,EAAtB,EAA0B;AACzD,QAAID,IAAI,IAAI,KAAKrD,OAAjB,EAA0B;AACxB,aAAO,KAAKA,OAAL,CAAaqD,IAAb,CAAP;AACD;;AACD,SAAKrD,OAAL,CAAaqD,IAAb,IAAqBC,EAAE,EAAvB;AACA,WAAO,KAAKtD,OAAL,CAAaqD,IAAb,CAAP;AACD,GAND;;AAQAxD,EAAAA,aAAa,CAACK,SAAd,CAAwBmB,YAAxB,GAAuC,SAASA,YAAT,CAAsBvB,OAAtB,EAA+B;AACpE,QAAIyD,OAAO,GAAG,IAAd;;AAEA,QAAIpC,WAAW,GAAG,EAAlB;AACArB,IAAAA,OAAO,CAACwC,OAAR,CAAgB,UAAU/B,MAAV,EAAkB;AAChC,UAAI,CAACA,MAAM,CAAC8B,QAAZ,EAAsB;AACpBlB,QAAAA,WAAW,CAACsB,IAAZ,CAAiBlC,MAAjB;AACD,OAFD,MAEO;AACLY,QAAAA,WAAW,CAACsB,IAAZ,CAAiBe,KAAjB,CAAuBrC,WAAvB,EAAoCoC,OAAO,CAAClC,YAAR,CAAqBd,MAAM,CAAC8B,QAA5B,CAApC;AACD;AACF,KAND;AAOA,WAAOlB,WAAP;AACD,GAZD;;AAcA,SAAOtB,aAAP;AACD,CAnLmB,EAApB;;AAqLA,eAAeA,aAAf","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport React from 'react';\n\nvar ColumnManager = function () {\n  function ColumnManager(columns, elements) {\n    _classCallCheck(this, ColumnManager);\n\n    this._cached = {};\n\n    this.columns = columns || this.normalize(elements);\n  }\n\n  ColumnManager.prototype.isAnyColumnsFixed = function isAnyColumnsFixed() {\n    var _this = this;\n\n    return this._cache('isAnyColumnsFixed', function () {\n      return _this.columns.some(function (column) {\n        return !!column.fixed;\n      });\n    });\n  };\n\n  ColumnManager.prototype.isAnyColumnsLeftFixed = function isAnyColumnsLeftFixed() {\n    var _this2 = this;\n\n    return this._cache('isAnyColumnsLeftFixed', function () {\n      return _this2.columns.some(function (column) {\n        return column.fixed === 'left' || column.fixed === true;\n      });\n    });\n  };\n\n  ColumnManager.prototype.isAnyColumnsRightFixed = function isAnyColumnsRightFixed() {\n    var _this3 = this;\n\n    return this._cache('isAnyColumnsRightFixed', function () {\n      return _this3.columns.some(function (column) {\n        return column.fixed === 'right';\n      });\n    });\n  };\n\n  ColumnManager.prototype.leftColumns = function leftColumns() {\n    var _this4 = this;\n\n    return this._cache('leftColumns', function () {\n      return _this4.groupedColumns().filter(function (column) {\n        return column.fixed === 'left' || column.fixed === true;\n      });\n    });\n  };\n\n  ColumnManager.prototype.rightColumns = function rightColumns() {\n    var _this5 = this;\n\n    return this._cache('rightColumns', function () {\n      return _this5.groupedColumns().filter(function (column) {\n        return column.fixed === 'right';\n      });\n    });\n  };\n\n  ColumnManager.prototype.leafColumns = function leafColumns() {\n    var _this6 = this;\n\n    return this._cache('leafColumns', function () {\n      return _this6._leafColumns(_this6.columns);\n    });\n  };\n\n  ColumnManager.prototype.leftLeafColumns = function leftLeafColumns() {\n    var _this7 = this;\n\n    return this._cache('leftLeafColumns', function () {\n      return _this7._leafColumns(_this7.leftColumns());\n    });\n  };\n\n  ColumnManager.prototype.rightLeafColumns = function rightLeafColumns() {\n    var _this8 = this;\n\n    return this._cache('rightLeafColumns', function () {\n      return _this8._leafColumns(_this8.rightColumns());\n    });\n  };\n\n  // add appropriate rowspan and colspan to column\n\n\n  ColumnManager.prototype.groupedColumns = function groupedColumns() {\n    var _this9 = this;\n\n    return this._cache('groupedColumns', function () {\n      var _groupColumns = function _groupColumns(columns) {\n        var currentRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var parentColumn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var rows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n        // track how many rows we got\n        rows[currentRow] = rows[currentRow] || [];\n        var grouped = [];\n        var setRowSpan = function setRowSpan(column) {\n          var rowSpan = rows.length - currentRow;\n          if (column && !column.children && // parent columns are supposed to be one row\n          rowSpan > 1 && (!column.rowSpan || column.rowSpan < rowSpan)) {\n            column.rowSpan = rowSpan;\n          }\n        };\n        columns.forEach(function (column, index) {\n          var newColumn = _extends({}, column);\n          rows[currentRow].push(newColumn);\n          parentColumn.colSpan = parentColumn.colSpan || 0;\n          if (newColumn.children && newColumn.children.length > 0) {\n            newColumn.children = _groupColumns(newColumn.children, currentRow + 1, newColumn, rows);\n            parentColumn.colSpan += newColumn.colSpan;\n          } else {\n            parentColumn.colSpan++;\n          }\n          // update rowspan to all same row columns\n          for (var i = 0; i < rows[currentRow].length - 1; ++i) {\n            setRowSpan(rows[currentRow][i]);\n          }\n          // last column, update rowspan immediately\n          if (index + 1 === columns.length) {\n            setRowSpan(newColumn);\n          }\n          grouped.push(newColumn);\n        });\n        return grouped;\n      };\n      return _groupColumns(_this9.columns);\n    });\n  };\n\n  ColumnManager.prototype.normalize = function normalize(elements) {\n    var _this10 = this;\n\n    var columns = [];\n    React.Children.forEach(elements, function (element) {\n      if (!React.isValidElement(element)) {\n        return;\n      }\n      var column = _extends({}, element.props);\n      if (element.key) {\n        column.key = element.key;\n      }\n      if (element.type.isTableColumnGroup) {\n        column.children = _this10.normalize(column.children);\n      }\n      columns.push(column);\n    });\n    return columns;\n  };\n\n  ColumnManager.prototype.reset = function reset(columns, elements) {\n    this.columns = columns || this.normalize(elements);\n    this._cached = {};\n  };\n\n  ColumnManager.prototype._cache = function _cache(name, fn) {\n    if (name in this._cached) {\n      return this._cached[name];\n    }\n    this._cached[name] = fn();\n    return this._cached[name];\n  };\n\n  ColumnManager.prototype._leafColumns = function _leafColumns(columns) {\n    var _this11 = this;\n\n    var leafColumns = [];\n    columns.forEach(function (column) {\n      if (!column.children) {\n        leafColumns.push(column);\n      } else {\n        leafColumns.push.apply(leafColumns, _this11._leafColumns(column.children));\n      }\n    });\n    return leafColumns;\n  };\n\n  return ColumnManager;\n}();\n\nexport default ColumnManager;"]},"metadata":{},"sourceType":"module"}