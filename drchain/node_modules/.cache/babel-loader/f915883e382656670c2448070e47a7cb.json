{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './strategies';\n\nfunction nonEmptyStringType(props, propsName) {\n  var value = props[propsName];\n\n  if (typeof value !== 'string' || !value) {\n    return new Error(); // Just a flag, so don't need message.\n  }\n}\n\nfunction valueType(props, propName, componentName) {\n  var labelInValueShape = PropTypes.shape({\n    value: nonEmptyStringType,\n    label: PropTypes.node\n  });\n\n  if (props.labelInValue) {\n    var validate = PropTypes.oneOfType([PropTypes.arrayOf(labelInValueShape), labelInValueShape]);\n    var error = validate.apply(undefined, arguments);\n\n    if (error) {\n      return new Error('Invalid prop `' + propName + '` supplied to `' + componentName + '`, ' + ('when `labelInValue` is `true`, `' + propName + '` should in ') + 'shape of `{ value: string, label?: string }`.');\n    }\n  } else if (props.treeCheckable && props.treeCheckStrictly) {\n    var _validate = PropTypes.oneOfType([PropTypes.arrayOf(labelInValueShape), labelInValueShape]);\n\n    var _error = _validate.apply(undefined, arguments);\n\n    if (_error) {\n      return new Error('Invalid prop `' + propName + '` supplied to `' + componentName + '`, ' + 'when `treeCheckable` and `treeCheckStrictly` are `true`, ' + ('`' + propName + '` should in shape of `{ value: string, label?: string }`.'));\n    }\n  } else if (props.multiple && props[propName] === '') {\n    return new Error('Invalid prop `' + propName + '` of type `string` supplied to `' + componentName + '`, ' + 'expected `array` when `multiple` is `true`.');\n  } else {\n    var _validate2 = PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]);\n\n    return _validate2.apply(undefined, arguments);\n  }\n}\n\nexport var SelectPropTypes = {\n  className: PropTypes.string,\n  prefixCls: PropTypes.string,\n  multiple: PropTypes.bool,\n  filterTreeNode: PropTypes.any,\n  showSearch: PropTypes.bool,\n  disabled: PropTypes.bool,\n  showArrow: PropTypes.bool,\n  allowClear: PropTypes.bool,\n  defaultOpen: PropTypes.bool,\n  open: PropTypes.bool,\n  transitionName: PropTypes.string,\n  animation: PropTypes.string,\n  choiceTransitionName: PropTypes.string,\n  onClick: PropTypes.func,\n  onChange: PropTypes.func,\n  onSelect: PropTypes.func,\n  onDeselect: PropTypes.func,\n  onSearch: PropTypes.func,\n  searchPlaceholder: PropTypes.string,\n  placeholder: PropTypes.any,\n  inputValue: PropTypes.any,\n  value: valueType,\n  defaultValue: valueType,\n  label: PropTypes.node,\n  defaultLabel: PropTypes.any,\n  labelInValue: PropTypes.bool,\n  dropdownStyle: PropTypes.object,\n  dropdownPopupAlign: PropTypes.object,\n  onDropdownVisibleChange: PropTypes.func,\n  maxTagTextLength: PropTypes.number,\n  showCheckedStrategy: PropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),\n  treeCheckStrictly: PropTypes.bool,\n  treeIcon: PropTypes.bool,\n  treeLine: PropTypes.bool,\n  treeDefaultExpandAll: PropTypes.bool,\n  treeCheckable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n  treeNodeLabelProp: PropTypes.string,\n  treeNodeFilterProp: PropTypes.string,\n  treeData: PropTypes.array,\n  treeDataSimpleMode: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  loadData: PropTypes.func\n};","map":{"version":3,"sources":["/Users/administrator/Desktop/DrChain/drchain_frontend/drchain/node_modules/rc-tree-select/es/PropTypes.js"],"names":["PropTypes","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","nonEmptyStringType","props","propsName","value","Error","valueType","propName","componentName","labelInValueShape","shape","label","node","labelInValue","validate","oneOfType","arrayOf","error","apply","undefined","arguments","treeCheckable","treeCheckStrictly","_validate","_error","multiple","_validate2","string","SelectPropTypes","className","prefixCls","bool","filterTreeNode","any","showSearch","disabled","showArrow","allowClear","defaultOpen","open","transitionName","animation","choiceTransitionName","onClick","func","onChange","onSelect","onDeselect","onSearch","searchPlaceholder","placeholder","inputValue","defaultValue","defaultLabel","dropdownStyle","object","dropdownPopupAlign","onDropdownVisibleChange","maxTagTextLength","number","showCheckedStrategy","oneOf","treeIcon","treeLine","treeDefaultExpandAll","treeNodeLabelProp","treeNodeFilterProp","treeData","array","treeDataSimpleMode","loadData"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './strategies';\n\nfunction nonEmptyStringType(props, propsName) {\n  var value = props[propsName];\n  if (typeof value !== 'string' || !value) {\n    return new Error(); // Just a flag, so don't need message.\n  }\n}\n\nfunction valueType(props, propName, componentName) {\n  var labelInValueShape = PropTypes.shape({\n    value: nonEmptyStringType,\n    label: PropTypes.node\n  });\n  if (props.labelInValue) {\n    var validate = PropTypes.oneOfType([PropTypes.arrayOf(labelInValueShape), labelInValueShape]);\n    var error = validate.apply(undefined, arguments);\n    if (error) {\n      return new Error('Invalid prop `' + propName + '` supplied to `' + componentName + '`, ' + ('when `labelInValue` is `true`, `' + propName + '` should in ') + 'shape of `{ value: string, label?: string }`.');\n    }\n  } else if (props.treeCheckable && props.treeCheckStrictly) {\n    var _validate = PropTypes.oneOfType([PropTypes.arrayOf(labelInValueShape), labelInValueShape]);\n    var _error = _validate.apply(undefined, arguments);\n    if (_error) {\n      return new Error('Invalid prop `' + propName + '` supplied to `' + componentName + '`, ' + 'when `treeCheckable` and `treeCheckStrictly` are `true`, ' + ('`' + propName + '` should in shape of `{ value: string, label?: string }`.'));\n    }\n  } else if (props.multiple && props[propName] === '') {\n    return new Error('Invalid prop `' + propName + '` of type `string` supplied to `' + componentName + '`, ' + 'expected `array` when `multiple` is `true`.');\n  } else {\n    var _validate2 = PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]);\n    return _validate2.apply(undefined, arguments);\n  }\n}\n\nexport var SelectPropTypes = {\n  className: PropTypes.string,\n  prefixCls: PropTypes.string,\n  multiple: PropTypes.bool,\n  filterTreeNode: PropTypes.any,\n  showSearch: PropTypes.bool,\n  disabled: PropTypes.bool,\n  showArrow: PropTypes.bool,\n  allowClear: PropTypes.bool,\n  defaultOpen: PropTypes.bool,\n  open: PropTypes.bool,\n  transitionName: PropTypes.string,\n  animation: PropTypes.string,\n  choiceTransitionName: PropTypes.string,\n  onClick: PropTypes.func,\n  onChange: PropTypes.func,\n  onSelect: PropTypes.func,\n  onDeselect: PropTypes.func,\n  onSearch: PropTypes.func,\n  searchPlaceholder: PropTypes.string,\n  placeholder: PropTypes.any,\n  inputValue: PropTypes.any,\n  value: valueType,\n  defaultValue: valueType,\n  label: PropTypes.node,\n  defaultLabel: PropTypes.any,\n  labelInValue: PropTypes.bool,\n  dropdownStyle: PropTypes.object,\n  dropdownPopupAlign: PropTypes.object,\n  onDropdownVisibleChange: PropTypes.func,\n  maxTagTextLength: PropTypes.number,\n  showCheckedStrategy: PropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),\n  treeCheckStrictly: PropTypes.bool,\n  treeIcon: PropTypes.bool,\n  treeLine: PropTypes.bool,\n  treeDefaultExpandAll: PropTypes.bool,\n  treeCheckable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n  treeNodeLabelProp: PropTypes.string,\n  treeNodeFilterProp: PropTypes.string,\n  treeData: PropTypes.array,\n  treeDataSimpleMode: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  loadData: PropTypes.func\n};"]},"metadata":{},"sourceType":"module"}